import os

import discord
from discord.ext import commands
from discord.ui import Button, View, Modal, TextInput
import logging
import asyncio
import sqlite3
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN') # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
SETTINGS_CHANNEL_ID = os.getenv('SETTINGS_CHANNEL_ID')
ROLE_ID = os.getenv('ROLE_ID')

# –ù–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
BUTTONS = {
    "add_slot": {"emoji": "‚ûï", "description": "–î–æ–±–∞–≤–∏—Ç—å 1 —Å–ª–æ—Ç –≤ –≤–∞—à—É –∫–æ–º–Ω–∞—Ç—É"},
    "remove_slot": {"emoji": "‚ûñ", "description": "–£–±—Ä–∞—Ç—å 1 —Å–ª–æ—Ç —Å –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã"},
    "lock_channel": {"emoji": "üîí", "description": "–†–∞–∑—Ä–µ—à–∏—Ç—å/–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –≤–∞—à—É –∫–æ–º–Ω–∞—Ç—É"},
    "toggle_voice": {"emoji": "üîä", "description": "–ó–∞–±—Ä–∞—Ç—å/–í—ã–¥–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–æ–≤–æ—Ä–∏—Ç—å –≤ –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç–µ"},
    "kick_user": {"emoji": "üë¢", "description": "–ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã"},
    "change_bitrate": {"emoji": "üì∂", "description": "–ò–∑–º–µ–Ω–∏—Ç—å –±–∏—Ç—Ä–µ–π—Ç –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã"},
    "set_slots": {"emoji": "#Ô∏è‚É£", "description": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ"},
    "transfer_ownership": {"emoji": "üëë", "description": "–ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–æ –≤–ª–∞–¥–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–æ–π"},
    "rename_channel": {"emoji": "‚úèÔ∏è", "description": "–°–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã"},
    "manage_permissions": {"emoji": "üõÇ", "description": "–í—ã–¥–∞—Ç—å/–ó–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∞—à—É –∫–æ–º–Ω–∞—Ç—É"}
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
CREATE_CHANNEL_ID = 1355632485567823872
AFK_CHANNEL_ID = 1303396230214451231
VOICE_CHANNELS_CATEGORY_ID = 1301639945647292486

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –±–∏—Ç—Ä–µ–π—Ç—ã
ALLOWED_BITRATES = [64000, 96000, 128000]

# --- Database setup ---
conn = None
cursor = None

def connect_db():
    global conn, cursor
    conn = sqlite3.connect("channels.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS channels (
        channel_id INTEGER PRIMARY KEY,
        owner_id INTEGER NOT NULL
    )''')
    conn.commit()

def set_channel_owner(channel_id: int, owner_id: int):
    cursor.execute("INSERT OR REPLACE INTO channels (channel_id, owner_id) VALUES (?, ?)", (channel_id, owner_id))
    conn.commit()

def get_channel_owner(channel_id: int):
    cursor.execute("SELECT owner_id FROM channels WHERE channel_id = ?", (channel_id,))
    result = cursor.fetchone()
    return result[0] if result else None

def transfer_channel_ownership(channel_id: int, new_owner_id: int):
    if get_channel_owner(channel_id) is not None:
        cursor.execute("UPDATE channels SET owner_id = ? WHERE channel_id = ?", (new_owner_id, channel_id))
        conn.commit()

def close_db():
    global conn
    if conn:
        conn.close()


# --- Discord Bot ---
intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.guilds = True
intents.members = True
intents.messages = True

bot = commands.Bot(command_prefix="!", intents=intents)


class ChannelSettingsView(View):
    def __init__(self):
        super().__init__(timeout=None)
        for custom_id, button in BUTTONS.items():
            self.add_item(Button(label="", emoji=button["emoji"], custom_id=custom_id))


# --- Modals ---
class BaseModal(Modal):
    def __init__(self, voice_channel: discord.VoiceChannel, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.voice_channel = voice_channel

    async def on_error(self, interaction: discord.Interaction, error: Exception):
        logging.error(f"Modal error: {error}", exc_info=True)
        await interaction.response.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", ephemeral=True)


class RenameChannelModal(BaseModal):
    def __init__(self, voice_channel: discord.VoiceChannel):
        super().__init__(voice_channel, title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª")
        self.new_name_input = TextInput(label="–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                                        required=True, default=voice_channel.name)
        self.add_item(self.new_name_input)

    async def on_submit(self, interaction: discord.Interaction):
        new_name = self.new_name_input.value.strip()

        if not (1 <= len(new_name) <= 100):
            await interaction.response.send_message("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.", ephemeral=True)
            return

        try:
            await self.voice_channel.edit(name=new_name)
            await interaction.response.send_message(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ **{new_name}**.", ephemeral=True)
            logging.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_name}")
        except discord.Forbidden:
            await interaction.response.send_message("–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è.", ephemeral=True)
            logging.error("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è")
        except discord.HTTPException as e:
            await interaction.response.send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}", ephemeral=True)
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")


class ChangeBitrateModal(BaseModal):
    def __init__(self, voice_channel: discord.VoiceChannel):
        super().__init__(voice_channel, title="–ò–∑–º–µ–Ω–∏—Ç—å –±–∏—Ç—Ä–µ–π—Ç –∫–∞–Ω–∞–ª–∞")
        bitrate_options = "\n".join([f"{bitrate // 1000} kbps" for bitrate in ALLOWED_BITRATES])
        self.new_bitrate_input = TextInput(label="–ù–æ–≤—ã–π –±–∏—Ç—Ä–µ–π—Ç (kbps)", placeholder=f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {bitrate_options}",
                                           required=True)
        self.add_item(self.new_bitrate_input)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            new_bitrate_kbps = int(self.new_bitrate_input.value)
            new_bitrate = new_bitrate_kbps * 1000

            if new_bitrate not in ALLOWED_BITRATES:
                await interaction.response.send_message(f"–ù–µ–≤–µ—Ä–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ: "
                                                        f"{', '.join([str(b // 1000) for b in ALLOWED_BITRATES])} kbps",
                                                        ephemeral=True)
                return

            await self.voice_channel.edit(bitrate=new_bitrate)
            await interaction.response.send_message(f"–ë–∏—Ç—Ä–µ–π—Ç –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_bitrate_kbps} kbps.",
                                                    ephemeral=True)
        except ValueError:
            await interaction.response.send_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–∏—Ç—Ä–µ–π—Ç–∞.",
                                                    ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∏—Ç—Ä–µ–π—Ç–∞ –∫–∞–Ω–∞–ª–∞.", ephemeral=True)
        except discord.HTTPException as e:
            await interaction.response.send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∏—Ç—Ä–µ–π—Ç–∞: {e}", ephemeral=True)


class SetSlotsModal(BaseModal):
    def __init__(self, voice_channel: discord.VoiceChannel):
        super().__init__(voice_channel, title="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤")
        self.new_slots_input = TextInput(label="–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤", placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤",
                                         required=True)
        self.add_item(self.new_slots_input)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            new_slots = int(self.new_slots_input.value)
            if not (0 <= new_slots <= 99):
                await interaction.response.send_message("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 99.", ephemeral=True)
                return

            await self.voice_channel.edit(user_limit=new_slots)
            await interaction.response.send_message(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_slots}.", ephemeral=True)
        except ValueError:
            await interaction.response.send_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ—Ç–æ–≤.",
                                                    ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ.",
                                                    ephemeral=True)
        except discord.HTTPException as e:
            await interaction.response.send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ—Ç–æ–≤: {e}", ephemeral=True)


class TransferOwnershipModal(BaseModal):
    def __init__(self, voice_channel: discord.VoiceChannel):
        super().__init__(voice_channel, title="–ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–æ –≤–ª–∞–¥–µ–Ω–∏—è")
        self.user_input = TextInput(label="ID –∏–ª–∏ @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", placeholder="–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                                    required=True)
        self.add_item(self.user_input)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            new_owner_id = int(self.user_input.value.strip("<@!>"))
            new_owner = await interaction.guild.fetch_member(new_owner_id)
        except Exception:
            await interaction.response.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", ephemeral=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞
        current_owner_id = get_channel_owner(self.voice_channel.id)
        if current_owner_id is None:
            await interaction.response.send_message("–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", ephemeral=True)
            return

        if current_owner_id != interaction.user.id:
            await interaction.response.send_message("–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.", ephemeral=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        transfer_channel_ownership(self.voice_channel.id, new_owner_id)

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∞ –Ω–æ–≤–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É
        perms = discord.PermissionOverwrite(manage_channels=True)
        await self.voice_channel.set_permissions(new_owner, overwrite=perms)

        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∞ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        old_owner = await interaction.guild.fetch_member(current_owner_id)
        await self.voice_channel.set_permissions(old_owner, overwrite=None)

        await interaction.response.send_message(f"–í–ª–∞–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º –ø–µ—Ä–µ–¥–∞–Ω–æ {new_owner.mention}.", ephemeral=True)
        logging.info(f"–í–ª–∞–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º {self.voice_channel.id} –ø–µ—Ä–µ–¥–∞–Ω–æ {new_owner_id}")

    async def on_error(self, interaction: discord.Interaction, error: Exception):
        logging.error(f"TransferOwnershipModal error: {error}", exc_info=True)
        await interaction.response.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –≤–ª–∞–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º.", ephemeral=True)


@bot.event
async def on_ready():
    print(f"Logged in as {bot.user.name}")
    connect_db()
    bot.add_view(ChannelSettingsView())
    try:
        synced = await bot.tree.sync()
        print(f"Synced {len(synced)} command(s)")
    except Exception as e:
        print(e)

@bot.event
async def on_disconnect():
    close_db()

@bot.event
async def on_interaction(interaction: discord.Interaction):
    if interaction.type == discord.InteractionType.component:
        custom_id = interaction.data["custom_id"]
        await handle_button_click(interaction, custom_id)

async def handle_button_click(interaction: discord.Interaction, custom_id: str):
    user = interaction.user
    voice_channel = user.voice.channel if user.voice else None

    if not voice_channel:
        await interaction.response.send_message("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)
        return

    channel_owner_id = get_channel_owner(voice_channel.id)
    if channel_owner_id is None:
        await interaction.response.send_message("–ö–∞–Ω–∞–ª –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª –∑–∞–Ω–æ–≤–æ.",
                                                ephemeral=True)
        return

    if channel_owner_id != user.id:
        await interaction.response.send_message("–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.", ephemeral=True)
        return

    modals = {
        "rename_channel": RenameChannelModal,
        "change_bitrate": ChangeBitrateModal,
        "set_slots": SetSlotsModal,
        "transfer_ownership": TransferOwnershipModal
    }

    if custom_id in modals:
        modal_class = modals[custom_id]
        modal = modal_class(voice_channel)
        await interaction.response.send_modal(modal)
        return

    if custom_id == "add_slot":
        new_limit = min(voice_channel.user_limit + 1, 99)
        await voice_channel.edit(user_limit=new_limit)
        await interaction.response.send_message(f"–î–æ–±–∞–≤–ª–µ–Ω 1 —Å–ª–æ—Ç. –¢–µ–ø–µ—Ä—å —Å–ª–æ—Ç–æ–≤: {new_limit}", ephemeral=True)
        return

    elif custom_id == "remove_slot":
        new_limit = max(voice_channel.user_limit - 1, 0)
        await voice_channel.edit(user_limit=new_limit)
        await interaction.response.send_message(f"–£–±—Ä–∞–Ω 1 —Å–ª–æ—Ç. –¢–µ–ø–µ—Ä—å —Å–ª–æ—Ç–æ–≤: {new_limit}", ephemeral=True)
        return

    elif custom_id == "lock_channel":
        perms = voice_channel.overwrites_for(interaction.guild.default_role)
        perms.connect = not perms.connect if perms.connect is not None else False
        await voice_channel.set_permissions(interaction.guild.default_role, overwrite=perms)
        status = "–∑–∞–∫—Ä—ã—Ç" if not perms.connect else "–æ—Ç–∫—Ä—ã—Ç"
        await interaction.response.send_message(f"–ö–∞–Ω–∞–ª —Ç–µ–ø–µ—Ä—å {status} –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", ephemeral=True)
        return

    elif custom_id in ["toggle_voice", "manage_permissions"]:
        await handle_user_permissions(interaction, voice_channel, custom_id)

    else:
        await interaction.response.send_message("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", ephemeral=True)


async def handle_user_permissions(interaction: discord.Interaction, voice_channel: discord.VoiceChannel,
                                  custom_id: str):
    user = interaction.user

    await interaction.response.send_message("–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è.",
                                            ephemeral=True)

    def check(msg):
        return msg.author == user and msg.channel == interaction.channel

    try:
        msg = await bot.wait_for("message", check=check, timeout=60.0)
        try:
            await msg.delete()
        except discord.NotFound:
            logging.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")

        if msg.mentions:
            mentioned_user = msg.mentions[0]
        else:
            try:
                mentioned_user = await interaction.guild.fetch_member(int(msg.content))
            except ValueError:
                await interaction.followup.send("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", ephemeral=True)
                return

        if not mentioned_user:
            await interaction.followup.send("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", ephemeral=True)
            return

        if custom_id == "toggle_voice":
            if mentioned_user.voice is None or mentioned_user.voice.channel != voice_channel:
                await interaction.followup.send(f"{mentioned_user.mention} –Ω–µ –≤ —ç—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.",
                                                ephemeral=True)
                return

            if mentioned_user.voice.mute:
                await mentioned_user.edit(mute=False)
                await interaction.followup.send(f"–°–µ—Ä–≤–µ—Ä–Ω—ã–π –º—É—Ç –¥–ª—è {mentioned_user.mention} —Å–Ω—è—Ç.", ephemeral=True)
            else:
                await mentioned_user.edit(mute=True)
                await interaction.followup.send(f"–°–µ—Ä–≤–µ—Ä–Ω—ã–π –º—É—Ç –¥–ª—è {mentioned_user.mention} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                                                ephemeral=True)

        elif custom_id == "manage_permissions":
            overwrites = voice_channel.overwrites_for(mentioned_user)
            connect_status = overwrites.connect if overwrites.connect is not None else True
            overwrites.connect = not connect_status
            await voice_channel.set_permissions(mentioned_user, overwrite=overwrites)
            status = "—Ä–∞–∑—Ä–µ—à–µ–Ω" if not overwrites.connect else "–∑–∞–ø—Ä–µ—â–µ–Ω"
            await interaction.followup.send(f"–í—Ö–æ–¥ –¥–ª—è {mentioned_user.mention} —Ç–µ–ø–µ—Ä—å {status}.", ephemeral=True)

    except TimeoutError:
        await interaction.followup.send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", ephemeral=True)
    except Exception as e:
        logging.error(f"Error in handle_user_permissions: {e}", exc_info=True)
        await interaction.followup.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", ephemeral=True)


@bot.event
async def on_voice_state_update(member, before, after):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ —É –±–æ—Ç–∞
    if not member.guild.me.guild_permissions.manage_channels:
        logging.warning("–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –≤ –∫–∞–Ω–∞–ª "–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª"
    if after.channel and after.channel.id == CREATE_CHANNEL_ID:
        logging.info(f"{member.name} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É '–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª'")
        category = after.channel.category
        if category is not None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            existing_channel = discord.utils.get(category.voice_channels, name=f"{member.display_name}")
            if existing_channel is None:
                new_channel = await category.create_voice_channel(name=f"{member.display_name}")
                await member.move_to(new_channel)
                logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª: {new_channel.name} –¥–ª—è {member.name}")
                set_channel_owner(new_channel.id, member.id)
                logging.info(f"–ö–∞–Ω–∞–ª {new_channel.name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            else:
                await member.move_to(existing_channel)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª
                logging.info(f"–ü–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª: {existing_channel.name} –¥–ª—è {member.name}")

    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–∞–Ω–∞–ª—ã, –∫—Ä–æ–º–µ –∫–∞–Ω–∞–ª–∞ "–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª"
    if (before.channel and len(before.channel.members) == 0 and
        before.channel.id not in {CREATE_CHANNEL_ID, AFK_CHANNEL_ID}):
        await check_and_delete_channel(before.channel)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
    elif after.channel is None and before.channel is not None:
        await check_and_delete_channel(before.channel)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
    elif after.channel is not None and before.channel is not None and before.channel != after.channel:
        await check_and_delete_channel(before.channel)

async def check_and_delete_channel(channel):
    category = discord.utils.get(channel.guild.categories, id=VOICE_CHANNELS_CATEGORY_ID)
    if (channel.category == category and len(channel.members) == 0
        and channel.id not in {CREATE_CHANNEL_ID, AFK_CHANNEL_ID}):
        await delete_channel(channel)

async def delete_channel(channel):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞–Ω–∞–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è AFK –∏–ª–∏ –∫–∞–Ω–∞–ª–æ–º "–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª"
    if channel.id not in {AFK_CHANNEL_ID, CREATE_CHANNEL_ID}:
        try:
            await channel.delete()
            logging.info(f"–£–¥–∞–ª–µ–Ω –∫–∞–Ω–∞–ª: {channel.name}")
            cursor.execute("DELETE FROM channels WHERE channel_id = ?", (channel.id,))
            conn.commit()
            logging.info(f"–ó–∞–ø–∏—Å—å –∫–∞–Ω–∞–ª–∞ {channel.id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        except discord.Forbidden:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª: {channel.name}. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        except discord.HTTPException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {channel.name}. –û—à–∏–±–∫–∞: {e}")
    else:
        logging.info(f"–ö–∞–Ω–∞–ª {channel.name} –Ω–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω.")


@bot.event
async def on_member_join(member):
    role = discord.utils.get(member.guild.roles, id=ROLE_ID)

    if role:
        try:
            await member.add_roles(role)
            logging.info(f"–†–æ–ª—å {role.name} –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.name}")
        except discord.Forbidden:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å {role.name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.name}. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        except discord.HTTPException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏ {role.name}: {e}")
    else:
        logging.error(f"–†–æ–ª—å —Å ID {ROLE_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run(BOT_TOKEN)
